# Copyright Statement:
#
# This software/firmware and related documentation ("MediaTek Software") are
# protected under relevant copyright laws. The information contained herein
# is confidential and proprietary to MediaTek Inc. and/or its licensors.
# Without the prior written permission of MediaTek inc. and/or its licensors,
# any reproduction, modification, use or disclosure of MediaTek Software,
# and information contained herein, in whole or in part, shall be strictly prohibited.
#
# MediaTek Inc. (C) 2011. All rights reserved.
#
# BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
# THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
# RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
# AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
# NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
# SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
# SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
# THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
# THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
# CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
# SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
# STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
# CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
# AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
# OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
# MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
#
# The following software/firmware and/or related documentation ("MediaTek Software")
# have been modified by MediaTek Inc. All revisions are subject to any receiver's
# applicable license agreements with MediaTek Inc.

# Compatible with Ubuntu 12.04
SHELL := /bin/bash

.DELETE_ON_ERROR:
all:

HOST_OS ?= $(shell uname | tr '[A-Z]' '[a-z]')
##############################################################
# Including Neccesary Files
#

ifndef DA_OUT
  DA_OUT := out
endif
ifndef MTK_PROJECT
  $(error MTK_PROJECT is not defined)
else
  export MTK_PROJECT
endif

##############################################################
# Variable Initialization
#

export D_ROOT           := $(CURDIR)
export MTK_ROOT_OUT     := $(CURDIR)
export PWD              := $(CURDIR)
export CREATE_SEC_LIB := FALSE
ALL                     ?= show_title show_internal_feature show_feature
ALL_PREGEN_FILE         :=

#internal > custom
ifneq ($(wildcard $(D_ROOT)/internal/$(MTK_PROJECT)/$(MTK_PROJECT).mk),)
 export MTK_ROOT_CUSTOM  := $(D_ROOT)/internal
else
 export MTK_ROOT_CUSTOM  := $(D_ROOT)/custom
endif

PROJECT_CONFIGS         := $(MTK_ROOT_CUSTOM)/$(MTK_PROJECT)/$(MTK_PROJECT).mk
include $(PROJECT_CONFIGS)

ifndef TARGET
  $(error TARGET is not defined)
else
  export TARGET
endif
export MTK_PATH_CUSTOM  := $(MTK_ROOT_CUSTOM)/$(TARGET)

ifdef TARGET_BOARD_PLATFORM
  export TARGET_BOARD_PLATFORM
  PLATFORM := $(shell echo $(TARGET_BOARD_PLATFORM) | tr A-Z a-z)
else
  ifndef MTK_PLATFORM
    $(error MTK_PLATFORM is not defined)
  else
    export MTK_PLATFORM
    PLATFORM := $(shell echo $(MTK_PLATFORM) | tr A-Z a-z)
  endif
endif

export MTK_ROOT_PLATFORM := $(D_ROOT)/platform
export MTK_PATH_PLATFORM := $(MTK_ROOT_PLATFORM)/$(PLATFORM)

export MTK_PATH_COMMON   := $(MTK_ROOT_PLATFORM)/common
export MTK_PATH_PAL      := $(MTK_ROOT_PLATFORM)/pal

export PL_INCLUDE_FILE   := -I$(MTK_PATH_COMMON)/inc \
				-I$(MTK_PATH_COMMON)/geniezone/inc \
				-I$(MTK_PATH_COMMON)/storage/mmc/inc \
				-I$(MTK_PATH_COMMON)/storage/nand/include \
				-I$(MTK_PATH_COMMON)/storage/nand/include/preloader \
				-I$(MTK_PATH_COMMON)/storage/nand/include/internal \
				-I$(MTK_PATH_COMMON)/gic/inc \
				-I$(MTK_PATH_CUSTOM)/inc \
				-I$(MTK_PATH_PAL)/inc \
				-I$(DA_OUT)/inc \
				-I$(MTK_PATH_PLATFORM)/src/init/inc \
				-I$(MTK_PATH_PLATFORM)/src/core/inc \
				-I$(MTK_PATH_PLATFORM)/src/drivers/inc \
				-I$(MTK_PATH_PLATFORM)/src/drivers/cpu/inc \
				-I$(MTK_PATH_PLATFORM)/src/security/inc \
				-I$(MTK_PATH_PLATFORM)/src/security/trustzone/inc \
				-I$(MTK_ROOT_CUSTOM)/$(PLATFORM)/drdi \
				-I$(MTK_ROOT_PLATFORM)/flashc \
				-I$(MTK_ROOT_PLATFORM)/flashc/include

ifndef PRELOADER_ROOT_DIR
PRELOADER_ROOT_DIR := $(abspath $(D_ROOT)/../../../../../..)
endif
export PRELOADER_ROOT_DIR
TOOL_PATH               ?= $(D_ROOT)/../../../../../../device/mediatek/build/build/tools

# files needed to build DA
DA_INFO                 := $(MTK_PATH_PLATFORM)/flash/make_script/chip_info.xml
DA_PACK_TOOL            := $(MTK_ROOT_PLATFORM)/flashc/tools/pack_da.py
GEN_FLASH_XML_TOOL := $(MTK_ROOT_PLATFORM)/flashc/tools/gen_flash_xml.py

BOARD_UPPER := $(shell echo $(PLATFORM) | tr a-z A-Z)
SCATTER_FILENAME := $(BOARD_UPPER)_Android_scatter.xml

ALL                     += build_info project_info
ALL_PREGEN_FILE         += $(DA_OUT)/inc/preloader.h $(DA_OUT)/inc/proj_cfg.h
COMMON_DIR_MK           := $(D_ROOT)/build/common-dir.mak
COMMON_FILE_MK          := $(D_ROOT)/build/common.mak
export COMMON_DIR_MK COMMON_FILE_MK
include build/debug.in build/setting_DA.in


#have build version NO. MTK_INTERNAL_BUILD_VERNO
include $(abspath $(D_ROOT))/../../../buildinfo_vnd/label.ini

ifeq ($(DA_USE_PL_HW_DRV),yes)
PL_SUBDIRS              := $(MTK_PATH_PLATFORM)/src/drivers \
				$(MTK_PATH_PLATFORM)/src/security \
				$(MTK_ROOT_PLATFORM)/common/storage \
				$(MTK_ROOT_PLATFORM)/common/uart \
				$(MTK_ROOT_PLATFORM)/common/watchdog \
				$(MTK_ROOT_PLATFORM)/common/gic \
				$(MTK_ROOT_PLATFORM)/common/systimer \
				$(MTK_ROOT_PLATFORM)/common/emi 
PL_OBJ1                 := $(DA_OBJ1)/pl
PL_OBJ2                 := $(DA_OBJ2)/pl
endif
DA_SUBDIRS                 := $(MTK_ROOT_PLATFORM)/flashc $(MTK_PATH_PLATFORM)/flash
ALL                     += dump_build_info
ALL                     += $(DA_OUT)/da.config

include $(MTK_PATH_PLATFORM)/flash/make_script/makefile.mak
export EMIGEN_OUT := $(DA_OUT)
export DRVGEN_OUT := $(DA_OUT)
-include tools/emigen/emigen.mk
-include tools/drvgen/drvgen.mk
ALL_PREGEN_FILE += $(EMIGEN_FILE_LIST)
ALL_PREGEN_FILE += $(DRVGEN_FILE_LIST)
export ALL_DEPENDENCY_FILE := $(foreach m,$(MAKEFILE_LIST),$(if $(filter /% ~%,$(m)),$(m),$(D_ROOT)/$(m)))

ifeq ($(ARCH), arm64)
  CROSS_COMPILE = $(PRELOADER_ROOT_DIR)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9.1/bin/aarch64-linux-android-
else
  CROSS_COMPILE = $(PRELOADER_ROOT_DIR)/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9.1/bin/arm-linux-androideabi-
endif
export CROSS_COMPILE
ifneq ($(wildcard $(PRELOADER_ROOT_DIR)/prebuilts/clang/host/linux-x86/clang-r383902),)
  CLANG_PATH ?= $(PRELOADER_ROOT_DIR)/prebuilts/clang/host/linux-x86/clang-r383902/bin/
else
  CLANG_PATH ?= $(PRELOADER_ROOT_DIR)/prebuilts/clang/host/linux-x86/clang-r433403b/bin/
endif
export CLANG_PATH

ifeq ($(CREATE_SEC_LIB),TRUE)
ALL += $(DA_1ST_SEC_LIB)
ALL += $(DA_2ND_SEC_LIB)
else
ALL += $(DA_BIN)/$(DA_MODE).bin
endif

.PHONY: clean
.PHONY: $(ALL)
all: $(ALL)

#########
# recursive
#
# $(1): subdir
# $(2): target flag
# $(3): dependency
define build-topdirs
$(2): $(3) FORCE
	@mkdir -p $$(dir $$@)
	$$(MAKE) -C $(1) --no-print-directory OBJ_PATH=$(4) DA_BUILD_STAGE=$(5) DA_MODE=$(6) PL_CODE=$(7)
endef

.PHONY: FORCE
FORCE:
DA_SUBDIRS_FLAGS1 :=
$(foreach d,$(DA_SUBDIRS),\
  $(eval r := $(patsubst $(D_ROOT)/%,%,$(patsubst %/,%,$(if $(filter /%,$(d)),,$(CURDIR)/)$(d))))\
  $(eval t := $(DA_OBJ1)/$(subst /,_,$(r)).flag)\
  $(eval $(call build-topdirs,$(d),$(t),$(ALL_PREGEN_FILE),$(DA_OBJ1),1,$(DA_MODE),))\
  $(eval DA_SUBDIRS_FLAGS1 += $(t))\
)
$(foreach d,$(PL_SUBDIRS),\
  $(eval r := $(patsubst $(D_ROOT)/%,%,$(patsubst %/,%,$(if $(filter /%,$(d)),,$(CURDIR)/)$(d))))\
  $(eval t := $(PL_OBJ1)/$(subst /,_,$(r)).flag)\
  $(eval $(call build-topdirs,$(d),$(t),$(ALL_PREGEN_FILE),$(PL_OBJ1),1,$(DA_MODE),1))\
  $(eval DA_SUBDIRS_FLAGS1 += $(t))\
)

DA_SUBDIRS_FLAGS2 :=
$(foreach d,$(DA_SUBDIRS),\
  $(eval r := $(patsubst $(D_ROOT)/%,%,$(patsubst %/,%,$(if $(filter /%,$(d)),,$(CURDIR)/)$(d))))\
  $(eval t := $(DA_OBJ2)/$(subst /,_,$(r)).flag)\
  $(eval $(call build-topdirs,$(d),$(t),$(ALL_PREGEN_FILE),$(DA_OBJ2),2,$(DA_MODE),))\
  $(eval DA_SUBDIRS_FLAGS2 += $(t))\
)
$(foreach d,$(PL_SUBDIRS),\
  $(eval r := $(patsubst $(D_ROOT)/%,%,$(patsubst %/,%,$(if $(filter /%,$(d)),,$(CURDIR)/)$(d))))\
  $(eval t := $(PL_OBJ2)/$(subst /,_,$(r)).flag)\
  $(eval $(call build-topdirs,$(d),$(t),$(ALL_PREGEN_FILE),$(PL_OBJ2),2,$(DA_MODE),1))\
  $(eval DA_SUBDIRS_FLAGS2 += $(t))\
)

##############################################################
# ELF Generation
#
ifeq ($(CREATE_SEC_LIB),TRUE)
$(DA_1ST_SEC_LIB): $(DA_BIN)/$(DA_MODE).bin
	rm -rf $@
	@echo AR $(DA_OUT)/out_da_common/*.o
	$(AR) -r $@ $(DA_OUT)/out_da_common/*.o
	@echo AR $(DA_OUT)/out_da_plat/*.o
	$(AR) -r $@ $(DA_OUT)/out_da_plat/*.o
	@echo ====================
	@echo DA1 Security Library
	@echo '$@' built at
	@echo time : $(shell date)
	@echo ====================

$(DA_2ND_SEC_LIB): $(DA_BIN)/$(DA_MODE).bin
	rm -rf $@
	@echo AR $(DA_OUT)/out_da_common/*.o
	$(AR) -r $@ $(DA_OUT)/out_da_common/*.o
	@echo AR $(DA_OUT)/out_da_2nd_sec/*.o
	$(AR) -r $@ $(DA_OUT)/out_da_2nd_sec/*.o
	@echo AR $(DA_OUT)/out_da_plat/*.o
	$(AR) -r $@ $(DA_OUT)/out_da_plat/*.o
	@echo ====================
	@echo DA2 Security Library
	@echo '$@' built at
	@echo time : $(shell date)
	@echo ====================

DA_1ST_LIBS :=
DA_2ND_LIBS := $(DA_DEVINFO_LIB)
else
DA_1ST_LIBS := $(DA_DEVINFO_LIB) $(DA_1ST_SEC_LIB)
DA_2ND_LIBS := $(DA_DEVINFO_LIB) $(DA_2ND_SEC_LIB)
endif

$(DA_BIN)/DA2.elf: $(DA_SUBDIRS_FLAGS2) $(LDSCRIPT_STAGE2) $(DA_2ND_LIBS) $(LD_GCC_LIBS)
	mkdir -p $(dir $@)
	cat $(DA_OBJ2)/*.flag | tr ' ' '\n' | grep "\.o" | sed -e 's%$$(OBJ_PATH)%$(DA_OBJ2)%g' > $(DA_BIN)/DA_OBJ2.flag
	cat $(PL_OBJ2)/*.flag | tr ' ' '\n' | grep "\.o" | sed -e 's%$$(OBJ_PATH)%$(PL_OBJ2)%g' > $(DA_BIN)/PL_OBJ2.flag
	$(LD) -T $(LDSCRIPT_STAGE2) $(LDFLAGS) \
	`cat $(DA_BIN)/DA_OBJ2.flag $(DA_BIN)/PL_OBJ2.flag | sort | uniq` \
	$(DA_2ND_LIBS) $(LD_GCC_LIBS) \
	-o $@
	rm -f $(DA_BIN)/DA_OBJ2.flag $(DA_BIN)/PL_OBJ2.flag

$(DA_BIN)/DA2.bin: $(DA_BIN)/DA2.elf
	mkdir -p $(dir $@)
	$(OBJCOPY) -O binary -S -g $(DA_OBJCOPY_FLAG) $< $@
#	$(OBJDUMP) -D -S  $<  > $<.dis.txt

$(DA_BIN)/DA1.elf: $(DA_SUBDIRS_FLAGS1) $(LDSCRIPT_STAGE1) $(DA_1ST_LIBS) $(LD_GCC_LIBS)
	mkdir -p $(dir $@)
	cat $(DA_OBJ1)/*.flag | tr ' ' '\n' | grep "\.o" | sed -e 's%$$(OBJ_PATH)%$(DA_OBJ1)%g' > $(DA_BIN)/DA_OBJ1.flag
	cat $(PL_OBJ1)/*.flag | tr ' ' '\n' | grep "\.o" | sed -e 's%$$(OBJ_PATH)%$(PL_OBJ1)%g' > $(DA_BIN)/PL_OBJ1.flag
	$(LD) -T $(LDSCRIPT_STAGE1) $(LDFLAGS) \
	`cat $(DA_BIN)/DA_OBJ1.flag $(DA_BIN)/PL_OBJ1.flag | sort | uniq` \
	$(DA_1ST_LIBS) $(LD_GCC_LIBS) \
	-o $@
	rm -f $(DA_BIN)/DA_OBJ1.flag $(DA_BIN)/PL_OBJ1.flag

$(DA_BIN)/DA1.bin: $(DA_BIN)/DA1.elf
	mkdir -p $(dir $@)
	$(OBJCOPY) -O binary -S -g $(DA_OBJCOPY_FLAG) $< $@
#	$(OBJDUMP) -D -S  $<  > $<.dis.txt

$(DA_BIN)/$(DA_MODE).bin: $(DA_INFO) $(DA_BIN)/DA1.bin $(DA_BIN)/DA2.bin
	mkdir -p $(dir $@)
	python $(DA_PACK_TOOL) $^ $@
	$(info "GEN_FLASH_XML_TOOL" $(GEN_FLASH_XML_TOOL) $(FLASH_XML_CFG) $(MTK_PROJECT) $(DA_MODE).bin $(SCATTER_FILENAME) $(MTK_INTERNAL_BUILD_VERNO) $(DA_BIN))
	python $(GEN_FLASH_XML_TOOL) $(FLASH_XML_CFG) $(MTK_PROJECT) $(DA_MODE).bin $(SCATTER_FILENAME) $(MTK_INTERNAL_BUILD_VERNO) $(DA_BIN)

##############################################################
# Dump Configurations
#

show_title:
	@echo =================================================================
	@echo Building Configuration:
	@echo Project              = $(MTK_PROJECT)
	@echo Platform             = $(MTK_PLATFORM)
	@echo Target Platform      = $(TARGET_BOARD_PLATFORM)
	@echo Buildspec            = buildspec.mak
	@echo =================================================================

show_internal_feature:
	@echo =================================================================
	@echo Internal Feature:
	@echo HW_INIT_ONLY         = $(HW_INIT_ONLY)
	@echo CFG_MDJTAG_SWITCH= $(CFG_MDJTAG_SWITCH)
	@echo CFG_MDMETA_DETECT= $(CFG_MDMETA_DETECT)
	@echo CFG_HW_WATCHDOG= $(CFG_HW_WATCHDOG)
	@echo CFG_APWDT= $(CFG_APWDT)
	@echo CFG_APWDT_DISABLE= $(CFG_APWDT_DISABLE)
	@echo CFG_MDWDT_DISABLE= $(CFG_MDWDT_DISABLE)
	@echo CFG_SYS_STACK_SZ= $(CFG_SYS_STACK_SZ)
	@echo CFG_MMC_ADDR_TRANS= $(CFG_MMC_ADDR_TRANS)
	@echo CFG_BOOT_ARGUMENT= $(CFG_BOOT_ARGUMENT)
	@echo CFG_RAM_CONSOLE= $(CFG_RAM_CONSOLE)
	@echo =================================================================
	@echo MTK_PATH_PLATFORM= $(MTK_PATH_PLATFORM)
	@echo MTK_PATH_CUSTOM= $(MTK_PATH_CUSTOM)
	@echo MTK_ROOT_CUSTOM= $(MTK_ROOT_CUSTOM)
	@echo CUSTOM_PATH= $(CUSTOM_PATH)
	@echo =================================================================

show_feature:
	@if [ -e "$(MTK_PATH_CUSTOM)/cust_bldr.mak" ]; then \
	echo  =========================================== ; \
	echo Platform Feature: ; \
	echo 'CFG_FPGA_PLATFORM'= $(CFG_FPGA_PLATFORM) ; \
	echo 'CFG_EVB_PLATFORM'= $(CFG_EVB_PLATFORM) ; \
	echo 'CFG_BATTERY_DETECT'= $(CFG_BATTERY_DETECT) ; \
	echo 'CFG_PMT_SUPPORT'= $(CFG_PMT_SUPPORT) ; \
	echo  =========================================== ; \
	echo Communication Feature: ; \
	echo 'CFG_UART_TOOL_HANDSHAKE'= $(CFG_UART_TOOL_HANDSHAKE) ; \
	echo 'CFG_USB_TOOL_HANDSHAKE'= $(CFG_USB_TOOL_HANDSHAKE) ; \
	echo 'CFG_USB_DOWNLOAD'= $(CFG_USB_DOWNLOAD) ; \
	echo 'CFG_LOG_BAUDRATE'= $(CFG_LOG_BAUDRATE) ; \
	echo 'CFG_META_BAUDRATE'= $(CFG_META_BAUDRATE) ; \
	echo 'CFG_UART_LOG'= $(CFG_UART_LOG) ; \
	echo 'CFG_UART_META'= $(CFG_UART_META) ; \
	echo 'CFG_EMERGENCY_DL_SUPPORT'= $(CFG_EMERGENCY_DL_SUPPORT) ; \
	echo 'CFG_EMERGENCY_DL_TIMEOUT_MS'= $(CFG_EMERGENCY_DL_TIMEOUT_MS) ; \
	echo 'MTK_UART_USB_SWITCH'= $(MTK_UART_USB_SWITCH) ; \
	echo  =========================================== ; \
	echo Image Loading: ; \
	echo 'CFG_LOAD_UBOOT'= $(CFG_LOAD_UBOOT) ; \
	echo 'CFG_LOAD_AP_ROM'= $(CFG_LOAD_AP_ROM) ; \
	echo 'CFG_LOAD_MD_ROM'= $(CFG_LOAD_MD_ROM) ; \
	echo 'CFG_LOAD_MD_RAMDISK'= $(CFG_LOAD_MD_RAMDISK) ; \
	echo 'CFG_LOAD_CONN_SYS'= $(CFG_LOAD_CONN_SYS) ; \
	echo 'CFG_UBOOT_MEMADDR'= $(CFG_UBOOT_MEMADDR) ; \
	echo 'CFG_AP_ROM_MEMADDR'= $(CFG_AP_ROM_MEMADDR) ; \
	echo 'CFG_MD1_ROM_MEMADDR'= $(CFG_MD1_ROM_MEMADDR) ; \
	echo 'CFG_MD1_RAMDISK_MEMADDR'= $(CFG_MD1_RAMDISK_MEMADDR) ; \
	echo 'CFG_MD2_ROM_MEMADDR'= $(CFG_MD2_ROM_MEMADDR) ; \
	echo 'CFG_MD2_RAMDISK_MEMADDR'= $(CFG_MD2_RAMDISK_MEMADDR) ; \
	echo 'CFG_CONN_SYS_MEMADDR'= $(CFG_CONN_SYS_MEMADDR) ; \
	echo 'ONEKEY_REBOOT_NORMAL_MODE_PL'= $(ONEKEY_REBOOT_NORMAL_MODE_PL) ; \
	echo 'KPD_USE_EXTEND_TYPE'= $(KPD_USE_EXTEND_TYPE) ; \
	echo 'KPD_PMIC_LPRST_TD'= $(KPD_PMIC_LPRST_TD) ; \
	echo 'MTK_PMIC_RST_KEY'= $(MTK_PMIC_RST_KEY) ; \
	echo 'CFG_ATF_SUPPORT'= $(CFG_ATF_SUPPORT) ; \
	echo 'CFG_ATF_LOG_SUPPORT'= $(CFG_ATF_LOG_SUPPORT) ; \
	echo 'CFG_TEE_SUPPORT'= $(CFG_TEE_SUPPORT) ; \
	echo 'CFG_TEE_VIRTUAL_RPMB_SUPPORT'= $(CFG_TEE_VIRTUAL_RPMB_SUPPORT) ; \
	echo 'CFG_RPMB_SET_KEY'= $(CFG_RPMB_SET_KEY) ; \
	echo 'CFG_TRUSTONIC_TEE_SUPPORT'= $(CFG_TRUSTONIC_TEE_SUPPORT) ; \
	echo 'CFG_MICROTRUST_TEE_SUPPORT'= $(CFG_MICROTRUST_TEE_SUPPORT) ; \
	echo 'CFG_TRUSTKERNEL_TEE_SUPPORT'= $(CFG_TRUSTKERNEL_TEE_SUPPORT) ; \
	echo 'CFG_TEE_SECURE_MEM_PROTECTED'= $(CFG_TEE_SECURE_MEM_PROTECTED) ; \
	echo 'CFG_TEE_SECURE_MEM_TAG_FORMAT'= $(CFG_TEE_SECURE_MEM_TAG_FORMAT) ; \
	echo 'CFG_TEE_SECURE_MEM_SHARED'= $(CFG_TEE_SECURE_MEM_SHARED) ; \
	echo 'CFG_TEE_TRUSTED_APP_HEAP_SIZE'= $(CFG_TEE_TRUSTED_APP_HEAP_SIZE) ; \
	echo 'CFG_RPMB_KEY_PROGRAMED_IN_KERNEL'= $(CFG_RPMB_KEY_PROGRAMED_IN_KERNEL) ; \
	echo 'MTK_EFUSE_WRITER_SUPPORT'= $(MTK_EFUSE_WRITER_SUPPORT) ; \
	echo 'CFG_GOOGLE_TRUSTY_SUPPORT'= $(CFG_GOOGLE_TRUSTY_SUPPORT) ; \
	echo 'CFG_GZ_SUPPORT'= $(CFG_GZ_SUPPORT) ; \
	echo 'CFG_GZ_ENABLE_BOOT'= $(CFG_GZ_ENABLE_BOOT) ; \
	echo 'CFG_KEEP_BOOTING_ON_GZ_NOT_EXIST'= $(CFG_KEEP_BOOTING_ON_GZ_NOT_EXIST) ; \
	echo 'CFG_GZ_NEED_DESCRAMBLE'= $(CFG_GZ_NEED_DESCRAMBLE) ; \
	echo 'CFG_GZ_REMAP'= $(CFG_GZ_REMAP) ; \
	echo 'CFG_NEBULA_VM_SUPPORT'= $(CFG_NEBULA_VM_SUPPORT) ; \
	echo 'CFG_NEBULA_LOAD_IN_PART2'= $(CFG_NEBULA_LOAD_IN_PART2) ; \
	echo 'CFG_GZ_PWRAP_ENABLE'= $(CFG_GZ_PWRAP_ENABLE) ; \
	fi
##############################################################
# Adding Build Time
#

build_info: $(DA_OUT)/inc/preloader.h
$(DA_OUT)/inc/preloader.h: $(ALL_DEPENDENCY_FILE)
	@mkdir -p $(dir $@)
	@echo // Auto generated. Build Time Information > $@
	@echo '#'define BUILD_TIME '"'$(shell date +%Y%m%d-%H%M%S)'"' >> $@

##############################################################
# Adding Project Configuration
#

project_info: $(DA_OUT)/inc/proj_cfg.h
$(DA_OUT)/inc/proj_cfg.h: $(MTK_PATH_PLATFORM)/default.mak $(MTK_PATH_CUSTOM)/cust_bldr.mak $(PROJECT_CONFIGS)
$(DA_OUT)/inc/proj_cfg.h: $(ALL_DEPENDENCY_FILE)
	@mkdir -p $(dir $@)
	@echo // Auto generated. Import ProjectConfig.mk > $@
	@echo '#'define CUSTOM_SUSBDL_CFG $(MTK_SEC_USBDL) >> $@
	@echo '#'define CUSTOM_SBOOT_CFG $(MTK_SEC_BOOT) >> $@
	@echo '#'define MTK_SEC_MODEM_AUTH $(MTK_SEC_MODEM_AUTH) >> $@
ifdef MTK_SEC_SECRO_AC_SUPPORT
	@echo '#'define MTK_SEC_SECRO_AC_SUPPORT $(MTK_SEC_SECRO_AC_SUPPORT) >> $@
endif

##############################################################
# Generate Key Info File
#

img_auth_info: $(IMAGE_AUTH_CFG_FILE)
$(IMAGE_AUTH_CFG_FILE): $(SIGN_TOOL) $(IMAGE_AUTH_KEY) $(IMAGE_AUTH_CFG)
$(IMAGE_AUTH_CFG_FILE): $(ALL_DEPENDENCY_FILE)
	@mkdir -p $(dir $@)
	@touch $@
	@chmod 777 $@
	$(SIGN_TOOL) $(IMAGE_AUTH_KEY) $(IMAGE_AUTH_CFG) $@ IMG

##############################################################
# Clean
#

clean:
	@rm -rf $(DA_OUT)/obj*
	@rm -rf $(DA_OUT)/inc
	@rm -rf $(DA_OUT)/bin
	@rm -rf $(DA_OUT)/out_crypto
	@rm -rf $(DA_OUT)/out_plat
	@rm -rf $(DA_OUT)/out_devinfo
	@rm -rf $(DA_OUT)/out_devinfo_debug
	@rm -rf $(DA_OUT)/out_hw_crypto_lib
	@rm -rf $(DA_OUT)/out_da_common
	@rm -rf $(DA_OUT)/out_da_2nd_sec
	@rm -rf $(DA_OUT)/out_da_plat

dump_build_info: $(DA_BIN)/$(DA_MODE).bin
	@echo "============================================"
	@echo "${MTK_PROJECT} preloader $(DA_BIN)/$(DA_MODE).bin built at"
	@echo "time : $(shell date)"
	@echo "img  size : `wc -c < $(DA_BIN)/$(DA_MODE).bin` byte"
	@echo ============================================


DA_CONFIG_FILES := \
	$(MTK_PATH_PLATFORM)/default.mak \
	$(MTK_ROOT_CUSTOM)/$(TARGET)/cust_bldr.mak \
	$(PROJECT_CONFIGS) \
	$(MTK_PATH_PLATFORM)/mode/$(PL_MODE).mak \
	$(MTK_PATH_PLATFORM)/feature.mak \
	$(MTK_PATH_PLATFORM)/flash/make_script/pl_feature_mask.mak \
	$(MTK_PATH_PLATFORM)/flash/make_script/feature.mak \
	$(MTK_PATH_PLATFORM)/flash/make_script/mode/$(DA_MODE).mak

DA_CONFIG_LISTS := $(shell cat $(DA_CONFIG_FILES) | grep "=\|:=\|+=\|?=" | sed 's/^\s*//' | grep -E "^\w" | sed 's/export //' | sed 's/[=|:=|+=|?=]/ /g' | cut -f1 -d' ' | sort | uniq)

$(DA_OUT)/da.config: $(wildcard $(DA_CONFIG_FILES))
	@rm -rf $@
	@$(foreach v,$(filter-out C_OPTION,$(DA_CONFIG_LISTS)),echo "$(v)=$(strip $($(v)))" >>$@;)
	@echo C_OPTION= >> $@ && echo "$(strip $(C_OPTION))" | tr ' ' '\n' >>$@